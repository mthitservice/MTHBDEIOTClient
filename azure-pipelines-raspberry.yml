# Azure DevOps Pipeline für MthBdeIotClient - Raspberry Pi Multi-Architecture Build
# Optimierte Pipeline für Raspberry Pi ARM64 und ARMv7l .deb Pakete

trigger:
  branches:
    exclude:
      - "*"  # Keine Branch-Trigger
  tags:
    include:
      - "v*"  # Nur bei Tags die mit "v" beginnen

# Deaktiviere auch Pull Request Triggers  
pr: none

variables:
  # Build-Konfiguration
  buildConfiguration: "Release"
  nodeVersion: "22.x"
  
  # Versioning
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/v')]
  releaseVersion: $[replace(variables['Build.SourceBranchName'], 'v', '')]
  
  # Artifact Names
  artifactName: "MthBdeIotClient-RaspberryPi"
  
  # GitHub Configuration
  githubRepository: "mthitservice/MTHBDEIOTClient"
  githubConnection: "github-connection"

stages:
  - stage: Build
    displayName: "Build Raspberry Pi Applications"
    jobs:
      - job: BuildRaspberryPiARM64
        displayName: "Build Raspberry Pi 64-bit (ARM64)"
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - checkout: self
            fetchDepth: 0
            persistCredentials: true
            displayName: "Checkout Source Code"

          - task: NodeTool@0
            displayName: "Install Node.js $(nodeVersion)"
            inputs:
              versionSpec: $(nodeVersion)

          - task: Cache@2
            displayName: "Cache node modules"
            inputs:
              key: 'npm | "$(Agent.OS)" | App/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: App/node_modules

          - script: |
              cd App
              echo "=== SYSTEM INFORMATION ==="
              echo "Node version: $(node --version)"
              echo "NPM version: $(npm --version)"
              echo "Working directory: $(pwd)"
              echo "Target: Raspberry Pi 64-bit (ARM64)"
              
              echo "=== NPM CONFIGURATION ==="
              npm config set fund false
              npm config set audit false
              npm config set progress false
            displayName: "System Information & NPM Setup"

          - script: |
              cd App
              echo "=== INSTALLING DEPENDENCIES ==="
              npm ci --ignore-scripts --no-audit --no-fund
              
              echo "=== VERIFYING CRITICAL PACKAGES ==="
              echo "electron-builder: $(npx electron-builder --version)"
              echo "Dependencies installed successfully"
            displayName: "Install Dependencies"
            timeoutInMinutes: 10

          - script: |
              cd App
              echo "=== SETTING VERSION ==="
              
              # Version aus Tag oder automatisch generieren
              if [ "$ISRELEASE" = "True" ]; then
                VERSION="$RELEASEVERSION"
                echo "Release Version: $VERSION"
              else
                BUILD_NUMBER="$BUILD_BUILDNUMBER"
                SHORT_COMMIT=$(echo "$BUILD_SOURCEVERSION" | cut -c1-7)
                VERSION="1.0.0-dev.$BUILD_NUMBER+$SHORT_COMMIT"
                echo "Development Version: $VERSION"
              fi

              # Environment Variables setzen
              echo "##vso[task.setvariable variable=APP_VERSION]$VERSION"

              # Package.json Version aktualisieren
              node -e "
                const fs = require('fs');
                const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                packageJson.version = '$VERSION';
                fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
                console.log('Updated package.json version to: $VERSION');
              "
              
              echo "Version set to: $VERSION"
            displayName: "Set Application Version"

          - script: |
              cd App
              echo "=== BUILDING APPLICATION ==="
              
              export NODE_ENV=production
              export APP_VERSION=$(APP_VERSION)
              export ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true
              
              npm run build:main
              npm run build:renderer
              
              echo "Application build completed successfully"
            displayName: "Build Application"

          - script: |
              cd App
              echo "=== PACKAGING RASPBERRY PI ARM64 DEB ==="
              
              export NODE_ENV=production
              export APP_VERSION=$(APP_VERSION)
              export ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true
              export ELECTRON_BUILDER_CACHE_DIR=/tmp/.electron-builder-cache
              
              # Erstelle .env file
              echo "NODE_ENV=production" > .env
              echo "APP_VERSION=$(APP_VERSION)" >> .env
              echo "ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true" >> .env
              
              echo "Building ARM64 DEB package..."
              npx electron-builder build --linux deb --arm64 --publish never
              
              echo "=== PACKAGE VALIDATION ==="
              for debfile in $(find . -name "*arm64*.deb" -o -name "*aarch64*.deb"); do
                if [ -f "$debfile" ]; then
                  echo "Found ARM64 package: $debfile"
                  size=$(stat -c%s "$debfile")
                  echo "  Size: $size bytes ($(echo "scale=2; $size/1024/1024" | bc) MB)"
                  
                  if dpkg-deb --info "$debfile" > /dev/null 2>&1; then
                    echo "  ✅ Valid DEB package"
                    echo "  Architecture: $(dpkg-deb --field "$debfile" Architecture)"
                  else
                    echo "  ❌ Invalid DEB package"
                  fi
                fi
              done
              
              echo "ARM64 packaging completed"
            displayName: "Package Raspberry Pi ARM64 DEB"

          - task: CopyFiles@2
            displayName: "Copy ARM64 Packages"
            inputs:
              sourceFolder: "App/release"
              contents: "**/*arm64*.deb"
              targetFolder: "$(Build.ArtifactStagingDirectory)/arm64"
              flattenFolders: false

          - task: PublishBuildArtifacts@1
            displayName: "Publish ARM64 Artifacts"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/arm64"
              artifactName: "arm64-packages"
              publishLocation: "Container"

      - job: BuildRaspberryPiARMv7l
        displayName: "Build Raspberry Pi 32-bit (ARMv7l)"
        dependsOn: BuildRaspberryPiARM64
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - checkout: self
            fetchDepth: 0
            persistCredentials: true
            displayName: "Checkout Source Code"

          - task: NodeTool@0
            displayName: "Install Node.js $(nodeVersion)"
            inputs:
              versionSpec: $(nodeVersion)

          - task: Cache@2
            displayName: "Cache node modules"
            inputs:
              key: 'npm | "$(Agent.OS)" | App/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: App/node_modules

          - script: |
              cd App
              echo "=== SYSTEM INFORMATION ==="
              echo "Node version: $(node --version)"
              echo "NPM version: $(npm --version)"
              echo "Target: Raspberry Pi 32-bit (ARMv7l)"
              
              echo "=== NPM CONFIGURATION ==="
              npm config set fund false
              npm config set audit false
              npm config set progress false
            displayName: "System Information & NPM Setup"

          - script: |
              cd App
              echo "=== INSTALLING DEPENDENCIES ==="
              npm ci --ignore-scripts --no-audit --no-fund
              
              echo "=== VERIFYING CRITICAL PACKAGES ==="
              echo "electron-builder: $(npx electron-builder --version)"
              echo "Dependencies installed successfully"
            displayName: "Install Dependencies"
            timeoutInMinutes: 10

          - script: |
              cd App
              echo "=== SETTING VERSION ==="
              
              # Version aus Tag oder automatisch generieren
              if [ "$ISRELEASE" = "True" ]; then
                VERSION="$RELEASEVERSION"
                echo "Release Version: $VERSION"
              else
                BUILD_NUMBER="$BUILD_BUILDNUMBER"
                SHORT_COMMIT=$(echo "$BUILD_SOURCEVERSION" | cut -c1-7)
                VERSION="1.0.0-dev.$BUILD_NUMBER+$SHORT_COMMIT"
                echo "Development Version: $VERSION"
              fi

              # Environment Variables setzen
              echo "##vso[task.setvariable variable=APP_VERSION]$VERSION"

              # Package.json Version aktualisieren
              node -e "
                const fs = require('fs');
                const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                packageJson.version = '$VERSION';
                fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
                console.log('Updated package.json version to: $VERSION');
              "
              
              echo "Version set to: $VERSION"
            displayName: "Set Application Version"

          - script: |
              cd App
              echo "=== BUILDING APPLICATION ==="
              
              export NODE_ENV=production
              export APP_VERSION=$(APP_VERSION)
              export ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true
              
              npm run build:main
              npm run build:renderer
              
              echo "Application build completed successfully"
            displayName: "Build Application"

          - script: |
              cd App
              echo "=== PACKAGING RASPBERRY PI ARMv7l DEB ==="
              
              export NODE_ENV=production
              export APP_VERSION=$(APP_VERSION)
              export ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true
              export ELECTRON_BUILDER_CACHE_DIR=/tmp/.electron-builder-cache
              
              # Erstelle .env file
              echo "NODE_ENV=production" > .env
              echo "APP_VERSION=$(APP_VERSION)" >> .env
              echo "ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true" >> .env
              
              echo "Building ARMv7l DEB package..."
              npx electron-builder build --linux deb --armv7l --publish never
              
              echo "=== PACKAGE VALIDATION ==="
              for debfile in $(find . -name "*armv7l*.deb"); do
                if [ -f "$debfile" ]; then
                  echo "Found ARMv7l package: $debfile"
                  size=$(stat -c%s "$debfile")
                  echo "  Size: $size bytes ($(echo "scale=2; $size/1024/1024" | bc) MB)"
                  
                  if dpkg-deb --info "$debfile" > /dev/null 2>&1; then
                    echo "  ✅ Valid DEB package"
                    echo "  Architecture: $(dpkg-deb --field "$debfile" Architecture)"
                  else
                    echo "  ❌ Invalid DEB package"
                  fi
                fi
              done
              
              echo "ARMv7l packaging completed"
            displayName: "Package Raspberry Pi ARMv7l DEB"

          - task: CopyFiles@2
            displayName: "Copy ARMv7l Packages"
            inputs:
              sourceFolder: "App/release"
              contents: "**/*armv7l*.deb"
              targetFolder: "$(Build.ArtifactStagingDirectory)/armv7l"
              flattenFolders: false

          - task: PublishBuildArtifacts@1
            displayName: "Publish ARMv7l Artifacts"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/armv7l"
              artifactName: "armv7l-packages"
              publishLocation: "Container"

      - job: CombineArtifacts
        displayName: "Combine All Packages"
        dependsOn: 
          - BuildRaspberryPiARM64
          - BuildRaspberryPiARMv7l
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - download: current
            artifact: arm64-packages
            displayName: "Download ARM64 Packages"

          - download: current
            artifact: armv7l-packages
            displayName: "Download ARMv7l Packages"

          - script: |
              echo "=== DOWNLOADED ARTIFACTS OVERVIEW ==="
              echo "Pipeline workspace contents:"
              find $(Pipeline.Workspace) -type f -exec ls -lh {} \;
            displayName: "Show Downloaded Artifacts"

          - task: CopyFiles@2
            displayName: "Copy All Packages to Combined Folder"
            inputs:
              sourceFolder: "$(Pipeline.Workspace)"
              contents: "**/*.deb"
              targetFolder: "$(Build.ArtifactStagingDirectory)/packages"
              flattenFolders: true

          - script: |
              echo "=== FINAL PACKAGE VERIFICATION ==="
              echo "Staging directory contents:"
              find $(Build.ArtifactStagingDirectory) -type f -exec ls -lh {} \;
              
              echo "=== PACKAGE SUMMARY ==="
              deb_count=$(find $(Build.ArtifactStagingDirectory) -name "*.deb" | wc -l)
              echo "DEB packages found: $deb_count"
              
              if [ $deb_count -gt 0 ]; then
                echo "✅ Raspberry Pi packages created successfully"
                
                # ARM64 Packages
                arm64_count=$(find $(Build.ArtifactStagingDirectory) -name "*arm64*.deb" -o -name "*aarch64*.deb" | wc -l)
                echo "🍓 ARM64 packages: $arm64_count"
                find $(Build.ArtifactStagingDirectory) -name "*arm64*.deb" -o -name "*aarch64*.deb" -exec basename {} \;
                
                # ARMv7l Packages
                armv7l_count=$(find $(Build.ArtifactStagingDirectory) -name "*armv7l*.deb" | wc -l)
                echo "🍓 ARMv7l packages: $armv7l_count"
                find $(Build.ArtifactStagingDirectory) -name "*armv7l*.deb" -exec basename {} \;
                
              else
                echo "❌ No DEB packages found"
                echo "Available files:"
                find $(Build.ArtifactStagingDirectory) -type f
              fi
            displayName: "Verify Combined Packages"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Raspberry Pi Artifacts"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: $(artifactName)
              publishLocation: "Container"
            condition: always()

  - stage: Deploy
    displayName: "Deploy & Release"
    dependsOn: Build
    condition: and(succeeded(), eq(variables.isRelease, true))
    jobs:
      - job: CreateGitHubRelease
        displayName: "Create GitHub Release"
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Build Artifacts"
            inputs:
              artifact: $(artifactName)
              path: "$(Pipeline.Workspace)/$(artifactName)"

          - script: |
              echo "=== DOWNLOADED ARTIFACTS VERIFICATION ==="
              echo "Workspace contents:"
              find $(Pipeline.Workspace) -name "*.deb" -exec ls -lh {} \;
              
              deb_count=$(find $(Pipeline.Workspace) -name "*.deb" | wc -l)
              echo "DEB packages found: $deb_count"
              
              if [ $deb_count -eq 0 ]; then
                echo "❌ No DEB packages found for GitHub Release"
                echo "Available files in workspace:"
                find $(Pipeline.Workspace) -type f
                exit 1
              else
                echo "✅ Found $deb_count DEB packages for release"
              fi
            displayName: "Verify Downloaded Artifacts"

          - task: GitHubRelease@1
            displayName: "Create GitHub Release"
            inputs:
              gitHubConnection: $(githubConnection)
              repositoryName: $(githubRepository)
              action: "create"
              target: "$(Build.SourceVersion)"
              tagSource: "userSpecifiedTag"
              tag: "$(Build.SourceBranchName)"
              title: "Release $(releaseVersion)"
              releaseNotesSource: "inline"
              releaseNotesInline: |
                ## Release $(releaseVersion)
                
                ### 📦 Download
                - **Raspberry Pi 64-bit (ARM64)**: `*arm64*.deb` oder `*aarch64*.deb`
                - **Raspberry Pi 32-bit (ARMv7l)**: `*armv7l*.deb`
                
                ### 🔧 Installation
                ```bash
                # Abhängigkeiten installieren
                sudo apt-get update
                sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libxtst6 libatspi2.0-0 libuuid1 libsecret-1-0 libgbm1
                
                # DEB Package installieren
                sudo dpkg -i mth-bde-iot-client_$(releaseVersion)_*.deb
                sudo apt-get install -f
                ```
                
                ### 🖥️ Kiosk-Modus
                ```bash
                # Autostart für Kiosk-Modus
                sudo nano /etc/xdg/lxsession/LXDE-pi/autostart
                
                # Diese Zeilen hinzufügen:
                @xset s off
                @xset -dpms
                @xset s noblank
                @mthbdeiotclient --fullscreen
                ```
                
                ### 📋 Systemanforderungen
                - **Raspberry Pi 4 (ARM64)**: 64-bit Raspberry Pi OS
                - **Raspberry Pi 3/3+ (ARMv7l)**: 32-bit Raspberry Pi OS
                - Mindestens 1GB RAM
                - Desktop-Umgebung (X11)
                
                ### 📋 Changelog
                Automatisierte Release von Tag $(Build.SourceBranchName)
                
                **Build Information:**
                - Build: $(Build.BuildNumber)
                - Commit: $(Build.SourceVersion)
                - Datum: $(Build.BuildDateTime)
              assets: |
                $(Pipeline.Workspace)/$(artifactName)/packages/*.deb
              assetUploadMode: "replace"
              isDraft: false
              isPreRelease: false
              addChangeLog: true
