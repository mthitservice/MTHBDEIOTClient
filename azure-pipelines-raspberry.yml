trigger:
  branches:
    include:
      - main
      - develop
      - master
  paths:
    include:
      - App/*
      - scripts/*
      - azure-pipelines-raspberry.yml
      - '!README.md'
      - '!*.md'
  batch: true

# Manuelle Trigger auch erlauben
pr:
  branches:
    include:
      - main
      - develop
      - master
  paths:
    include:
      - App/*
      - scripts/*
      - azure-pipelines-raspberry.yml

pool:
  vmImage: 'ubuntu-latest'

variables:
  nodeVersion: '22.x'
  buildConfiguration: 'Release'
  projectPath: 'App'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build for Raspberry Pi'
    steps:
    - checkout: self
      fetchDepth: 1
      clean: true

    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | $(projectPath)/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(projectPath)/node_modules
      displayName: 'Cache npm modules'

    - script: |
        cd $(projectPath)
        npm ci
      displayName: 'Install dependencies'

    - script: |
        cd $(projectPath)
        npm run build
      displayName: 'Build application'

    - script: |
        cd $(projectPath)
        npm run package:raspberry-deb
      displayName: 'Package for Raspberry Pi'

    - task: PowerShell@2
      displayName: 'Validate DEB Package'
      inputs:
        targetType: 'inline'
        script: |
          $debPath = "$(projectPath)/release/build"
          
          Write-Host "Checking DEB files in: $debPath"
          
          if (Test-Path $debPath) {
            $debFiles = Get-ChildItem -Path $debPath -Filter "*.deb" -Recurse
            
            if ($debFiles.Count -eq 0) {
              Write-Error "No DEB files found in build directory"
              exit 1
            }
            
            foreach ($debFile in $debFiles) {
              Write-Host "Validating DEB file: $($debFile.Name)"
              Write-Host "File size: $($debFile.Length) bytes"
              
              # Check if file size is reasonable (should be > 50MB for Electron app)
              if ($debFile.Length -lt 50MB) {
                Write-Warning "DEB file seems unusually small: $($debFile.Length) bytes"
              }
              
              # Check file header using file command (available in Ubuntu)
              $fileType = & file $debFile.FullName
              Write-Host "File type: $fileType"
              
              if ($fileType -notmatch "Debian") {
                Write-Error "File does not appear to be a valid Debian package: $fileType"
                exit 1
              }
              
              # Try to extract package info
              try {
                $packageInfo = & dpkg-deb --info $debFile.FullName
                Write-Host "Package validation successful"
                Write-Host "Package info preview:"
                Write-Host $packageInfo
              } catch {
                Write-Error "Failed to validate DEB package: $($_.Exception.Message)"
                exit 1
              }
            }
          } else {
            Write-Error "Build directory not found: $debPath"
            exit 1
          }

    - task: PowerShell@2
      displayName: 'Prepare artifacts and update install script'
      inputs:
        targetType: 'inline'
        script: |
          # Create artifacts directory
          $artifactsDir = "$(Build.ArtifactStagingDirectory)"
          if (!(Test-Path $artifactsDir)) {
            New-Item -ItemType Directory -Path $artifactsDir -Force
          }
          
          # Copy DEB files to artifacts
          $debPath = "$(projectPath)/release/build"
          $debFiles = Get-ChildItem -Path $debPath -Filter "*.deb" -Recurse
          
          foreach ($debFile in $debFiles) {
            Copy-Item -Path $debFile.FullName -Destination $artifactsDir -Force
            Write-Host "Copied: $($debFile.Name)"
          }
          
          # Copy install script
          Copy-Item -Path "scripts/install-raspberry.sh" -Destination $artifactsDir -Force
          Write-Host "Copied install script"
          
          # Update install script with correct filename
          $installScript = Join-Path $artifactsDir "install-raspberry.sh"
          $content = Get-Content $installScript -Raw
          
          # Get the actual DEB filename
          $actualDebFile = $debFiles[0].Name
          Write-Host "Actual DEB filename: $actualDebFile"
          
          # Update the script to use the actual filename
          $content = $content -replace 'DEB_FILE=".*"', "DEB_FILE=`"$actualDebFile`""
          
          # Ensure the script uses the correct GitHub URLs
          $content = $content -replace 'https://github.com/mthitservice/MTHBDEIOTClient/raw/main', 'https://github.com/mthitservice/MTHBDEIOTClient/blob/main'
          
          Set-Content -Path $installScript -Value $content
          Write-Host "Updated install script with correct filename and URLs"

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'raspberry-pi-build'
        publishLocation: 'Container'
      displayName: 'Publish build artifacts'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: Deploy
    displayName: 'Deploy to GitHub Releases'
    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'raspberry-pi-build'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download build artifacts'

    - task: PowerShell@2
      displayName: 'Prepare release files'
      inputs:
        targetType: 'inline'
        script: |
          $artifactsPath = "$(System.ArtifactsDirectory)/raspberry-pi-build"
          $releaseDir = "$(Build.ArtifactStagingDirectory)/release"
          
          if (!(Test-Path $releaseDir)) {
            New-Item -ItemType Directory -Path $releaseDir -Force
          }
          
          # Copy all files to release directory
          Copy-Item -Path "$artifactsPath/*" -Destination $releaseDir -Recurse -Force
          
          # List files for verification
          Write-Host "Files prepared for release:"
          Get-ChildItem -Path $releaseDir -Recurse | ForEach-Object {
            Write-Host "  $($_.Name) - $($_.Length) bytes"
          }
          
          # Verify DEB files once more before release
          $debFiles = Get-ChildItem -Path $releaseDir -Filter "*.deb"
          foreach ($debFile in $debFiles) {
            Write-Host "Final validation of: $($debFile.Name)"
            $fileType = & file $debFile.FullName
            Write-Host "File type: $fileType"
            
            if ($fileType -notmatch "Debian") {
              Write-Error "Release validation failed - not a valid Debian package"
              exit 1
            }
          }

    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'github-service-connection'
        repositoryName: 'mthitservice/MTHBDEIOTClient'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        tagPattern: 'v*'
        releaseNotesSource: 'inline'
        releaseNotesInline: |
          ## Raspberry Pi Release $(Build.BuildNumber)
          
          ### What's New
          - Automated build and deployment for Raspberry Pi
          - Validated DEB package for ARM architecture
          - Updated installation script with proper GitHub URLs
          
          ### Installation
          ```bash
          # Download and run the installation script
          wget https://github.com/mthitservice/MTHBDEIOTClient/blob/main/scripts/install-raspberry.sh
          chmod +x install-raspberry.sh
          sudo ./install-raspberry.sh
          ```
          
          ### Files in this release
          - `*.deb` - Debian package for Raspberry Pi (ARM)
          - `install-raspberry.sh` - Automated installation script
          
          ### Requirements
          - Raspberry Pi OS (32-bit or 64-bit)
          - ARM architecture (ARMv7l)
          - Minimum 1GB RAM
          
          Built with Azure DevOps Pipeline
        assets: '$(Build.ArtifactStagingDirectory)/release/*'
        addChangeLog: true
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
      displayName: 'Create GitHub Release'

    - task: PowerShell@2
      displayName: 'Update latest release info'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Release completed successfully"
          Write-Host "Build Number: $(Build.BuildNumber)"
          Write-Host "Source Version: $(Build.SourceVersion)"
          Write-Host "Release URL: https://github.com/mthitservice/MTHBDEIOTClient/releases"
          
          # Log the files that were released
          $releaseDir = "$(Build.ArtifactStagingDirectory)/release"
          Write-Host "Released files:"
          Get-ChildItem -Path $releaseDir | ForEach-Object {
            Write-Host "  - $($_.Name)"
          }
