# Azure DevOps Release Pipeline für MthBdeIotClient Raspberry Pi
# Separate Pipeline für Release-Management

trigger: none # Keine automatischen Trigger - nur manuell oder über andere Pipeline

resources:
  pipelines:
    - pipeline: BuildPipeline
      source: "MthBdeIotClient-RaspberryPi-Build"
      trigger:
        tags:
          include:
            - "v*"

variables:
  # Release-Konfiguration
  releaseEnvironment: "RaspberryPi-Production"
  artifactName: "MthBdeIotClient-RaspberryPi"
  
  # GitHub Configuration für automatische Releases
  githubRepository: "mthitservice/MTHBDEIOTClient"
  githubConnection: "github-connection"

stages:
  - stage: ValidateRelease
    displayName: "Validate Release Artifacts"
    jobs:
      - job: ValidateArtifacts
        displayName: "Validate Raspberry Pi Artifacts"
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - download: BuildPipeline
            displayName: "Download Build Artifacts"
            artifact: $(artifactName)

          - script: |
              echo "=== RELEASE ARTIFACT VALIDATION ==="
              
              artifact_path="$(Pipeline.Workspace)/BuildPipeline/$(artifactName)"
              echo "Artifact path: $artifact_path"
              
              if [ ! -d "$artifact_path" ]; then
                echo "❌ Artifact directory not found"
                exit 1
              fi
              
              echo "✅ Artifact directory found"
              
              # Validate DEB packages
              deb_files=$(find "$artifact_path" -name "*.deb" | wc -l)
              echo "DEB packages found: $deb_files"
              
              if [ $deb_files -eq 0 ]; then
                echo "❌ No DEB packages found"
                exit 1
              fi
              
              echo "✅ DEB packages validated"
              
              # Show package details
              echo "=== PACKAGE DETAILS ==="
              find "$artifact_path" -name "*.deb" | while read deb_file; do
                echo "📦 $(basename "$deb_file")"
                echo "   Size: $(ls -lh "$deb_file" | awk '{print $5}')"
                echo "   Path: $deb_file"
                
                # Validate DEB package structure
                if dpkg --info "$deb_file" > /tmp/deb_info.txt 2>&1; then
                  echo "   ✅ Valid DEB package"
                  echo "   Package: $(grep "Package:" /tmp/deb_info.txt | cut -d' ' -f2-)"
                  echo "   Version: $(grep "Version:" /tmp/deb_info.txt | cut -d' ' -f2-)"
                  echo "   Architecture: $(grep "Architecture:" /tmp/deb_info.txt | cut -d' ' -f2-)"
                else
                  echo "   ❌ Invalid DEB package"
                  cat /tmp/deb_info.txt
                fi
                echo ""
              done
              
              # Validate installation files
              echo "=== INSTALLATION FILES ==="
              if [ -d "$artifact_path/installation" ]; then
                echo "✅ Installation directory found"
                find "$artifact_path/installation" -type f | while read file; do
                  echo "   📄 $(basename "$file")"
                done
              else
                echo "⚠️ No installation directory found"
              fi
              
              echo "=== VALIDATION COMPLETE ==="
              echo "✅ All artifacts validated successfully"
            displayName: "Validate Package Quality"

          - script: |
              echo "=== RELEASE READINESS CHECK ==="
              
              artifact_path="$(Pipeline.Workspace)/BuildPipeline/$(artifactName)"
              
              # Check if this is a tagged release
              if [ -n "$(resources.pipeline.BuildPipeline.runName)" ]; then
                echo "Build Run: $(resources.pipeline.BuildPipeline.runName)"
              fi
              
              # Extract version information from DEB package
              deb_file=$(find "$artifact_path" -name "*.deb" | head -1)
              if [ -n "$deb_file" ]; then
                echo "Extracting version from DEB package..."
                version=$(dpkg --field "$deb_file" Version)
                echo "Package Version: $version"
                echo "##vso[task.setvariable variable=RELEASE_VERSION]$version"
                
                package_name=$(dpkg --field "$deb_file" Package)
                echo "Package Name: $package_name"
                echo "##vso[task.setvariable variable=PACKAGE_NAME]$package_name"
              fi
              
              echo "✅ Release is ready for deployment"
            displayName: "Release Readiness Check"

  - stage: CreateInternalRelease
    displayName: "Create Internal Release"
    dependsOn: ValidateRelease
    jobs:
      - deployment: InternalRelease
        displayName: "Create Internal Release Package"
        environment: $(releaseEnvironment)
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: BuildPipeline
                  displayName: "Download Validated Artifacts"
                  artifact: $(artifactName)

                - task: PowerShell@2
                  displayName: "Generate Release Documentation"
                  inputs:
                    targetType: "inline"
                    script: |
                      $version = "$(RELEASE_VERSION)"
                      $packageName = "$(PACKAGE_NAME)"
                      $buildId = "$(resources.pipeline.BuildPipeline.runID)"
                      
                      $releaseDoc = @"
                      # MthBdeIotClient Raspberry Pi Release
                      
                      ## Release Information
                      - **Version:** $version
                      - **Package:** $packageName
                      - **Build ID:** $buildId
                      - **Release Date:** $(Get-Date -Format "dd.MM.yyyy HH:mm")
                      - **Architecture:** ARMv7l (Raspberry Pi 3+)
                      
                      ## Installation Instructions
                      
                      ### Quick Installation
                      ``````bash
                      # Download und Installation
                      sudo dpkg -i $packageName_$version_armhf.deb
                      sudo apt-get install -f
                      ``````
                      
                      ### Verification
                      ``````bash
                      # Prüfe Installation
                      dpkg -l | grep mthbdeiotclient
                      
                      # Starte Anwendung
                      mthbdeiotclient
                      ``````
                      
                      ## Troubleshooting
                      
                      ### Common Issues
                      1. **Missing Dependencies:**
                         ``````bash
                         sudo apt-get update
                         sudo apt-get install -f
                         ``````
                      
                      2. **Permission Issues:**
                         ``````bash
                         sudo chmod +x /usr/bin/mthbdeiotclient
                         ``````
                      
                      3. **Display Issues:**
                         ``````bash
                         export DISPLAY=:0
                         mthbdeiotclient
                         ``````
                      
                      ## Deinstallation
                      ``````bash
                      sudo dpkg -r $packageName
                      ``````
                      
                      ## Support
                      - GitHub: https://github.com/$(githubRepository)
                      - Issues: https://github.com/$(githubRepository)/issues
                      "@
                      
                      $releaseDoc | Out-File -FilePath "$(Agent.TempDirectory)/release-documentation.md" -Encoding UTF8
                      Write-Host "Release documentation generated"

                - script: |
                    echo "=== CREATING INTERNAL RELEASE PACKAGE ==="
                    
                    artifact_path="$(Pipeline.Workspace)/BuildPipeline/$(artifactName)"
                    release_path="$(Agent.TempDirectory)/release-package"
                    
                    # Create release package structure
                    mkdir -p "$release_path/packages"
                    mkdir -p "$release_path/documentation"
                    mkdir -p "$release_path/installation"
                    
                    # Copy DEB packages
                    echo "Copying DEB packages..."
                    find "$artifact_path" -name "*.deb" -exec cp {} "$release_path/packages/" \;
                    
                    # Copy installation files
                    echo "Copying installation files..."
                    if [ -d "$artifact_path/installation" ]; then
                      cp -r "$artifact_path/installation/"* "$release_path/installation/"
                    fi
                    
                    # Add release documentation
                    cp "$(Agent.TempDirectory)/release-documentation.md" "$release_path/documentation/"
                    
                    # Create checksums
                    echo "Creating checksums..."
                    cd "$release_path/packages"
                    sha256sum *.deb > SHA256SUMS
                    
                    # Create release info
                    echo "=== RELEASE PACKAGE INFO ===" > "$release_path/RELEASE_INFO.txt"
                    echo "Version: $(RELEASE_VERSION)" >> "$release_path/RELEASE_INFO.txt"
                    echo "Package: $(PACKAGE_NAME)" >> "$release_path/RELEASE_INFO.txt"
                    echo "Build: $(resources.pipeline.BuildPipeline.runID)" >> "$release_path/RELEASE_INFO.txt"
                    echo "Date: $(date)" >> "$release_path/RELEASE_INFO.txt"
                    echo "Architecture: ARMv7l" >> "$release_path/RELEASE_INFO.txt"
                    echo "" >> "$release_path/RELEASE_INFO.txt"
                    echo "Files:" >> "$release_path/RELEASE_INFO.txt"
                    find "$release_path" -type f -exec basename {} \; | sort >> "$release_path/RELEASE_INFO.txt"
                    
                    echo "✅ Internal release package created"
                    echo "📦 Package location: $release_path"
                    echo "📊 Total files: $(find "$release_path" -type f | wc -l)"
                  displayName: "Create Release Package"

                - task: PublishBuildArtifacts@1
                  displayName: "Publish Internal Release"
                  inputs:
                    pathToPublish: "$(Agent.TempDirectory)/release-package"
                    artifactName: "RaspberryPi-Release-$(RELEASE_VERSION)"
                    publishLocation: "Container"

  - stage: PrepareGitHubRelease
    displayName: "Prepare GitHub Release (Manual)"
    dependsOn: CreateInternalRelease
    condition: succeeded()
    jobs:
      - job: PrepareGitHubAssets
        displayName: "Prepare Assets for GitHub"
        pool:
          vmImage: "ubuntu-latest"
        
        steps:
          - download: current
            displayName: "Download Release Package"
            artifact: "RaspberryPi-Release-$(RELEASE_VERSION)"

          - script: |
              echo "=========================================="
              echo "🚀 GITHUB RELEASE PREPARATION"
              echo "=========================================="
              echo ""
              echo "✅ Release Package Ready"
              echo "📦 Version: $(RELEASE_VERSION)"
              echo "🎯 Package: $(PACKAGE_NAME)"
              echo ""
              echo "📋 MANUAL STEPS FOR GITHUB RELEASE:"
              echo ""
              echo "1. 📥 DOWNLOAD ARTIFACTS:"
              echo "   - Go to this pipeline run"
              echo "   - Download 'RaspberryPi-Release-$(RELEASE_VERSION)' artifact"
              echo ""
              echo "2. 🏷️ CREATE GITHUB RELEASE:"
              echo "   - Go to: https://github.com/$(githubRepository)/releases"
              echo "   - Click 'Create a new release'"
              echo "   - Tag: v$(RELEASE_VERSION)"
              echo "   - Title: 'MthBdeIotClient Raspberry Pi v$(RELEASE_VERSION)'"
              echo ""
              echo "3. 📤 UPLOAD ASSETS:"
              release_path="$(Pipeline.Workspace)/RaspberryPi-Release-$(RELEASE_VERSION)"
              if [ -d "$release_path/packages" ]; then
                echo "   DEB Packages:"
                find "$release_path/packages" -name "*.deb" | while read deb; do
                  echo "   - $(basename "$deb")"
                done
                echo "   - SHA256SUMS"
              fi
              if [ -d "$release_path/installation" ]; then
                echo "   Installation Files:"
                find "$release_path/installation" -type f | while read file; do
                  echo "   - $(basename "$file")"
                done
              fi
              echo ""
              echo "4. 📝 RELEASE NOTES:"
              if [ -f "$release_path/documentation/release-documentation.md" ]; then
                echo "   - Use content from: documentation/release-documentation.md"
              fi
              echo ""
              echo "5. ✅ PUBLISH RELEASE"
              echo ""
              echo "🔗 QUICK LINKS:"
              echo "   Repository: https://github.com/$(githubRepository)"
              echo "   Releases: https://github.com/$(githubRepository)/releases"
              echo "   New Release: https://github.com/$(githubRepository)/releases/new"
              echo ""
              echo "=========================================="
            displayName: "GitHub Release Instructions"

          - task: PublishBuildArtifacts@1
            displayName: "Publish GitHub Assets"
            inputs:
              pathToPublish: "$(Pipeline.Workspace)/RaspberryPi-Release-$(RELEASE_VERSION)"
              artifactName: "GitHub-Release-Assets"
              publishLocation: "Container"

  - stage: PublishGitHubRelease
    displayName: "Publish GitHub Release"
    dependsOn: CreateInternalRelease
    condition: succeeded()
    jobs:
      - deployment: GitHubRelease
        displayName: "Create GitHub Release"
        environment: "GitHub-Production"
        pool:
          vmImage: "ubuntu-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  displayName: "Download Release Package"
                  artifact: "RaspberryPi-Release-$(RELEASE_VERSION)"

                - script: |
                    echo "=== GITHUB RELEASE PREPARATION ==="
                    echo "Version: $(RELEASE_VERSION)"
                    echo "Package: $(PACKAGE_NAME)"
                    echo "Repository: $(githubRepository)"
                    echo "Connection: $(githubConnection)"
                    
                    release_path="$(Pipeline.Workspace)/RaspberryPi-Release-$(RELEASE_VERSION)"
                    echo "Release path: $release_path"
                    
                    if [ -d "$release_path" ]; then
                      echo "✅ Release package found"
                      echo "📦 Available files:"
                      find "$release_path" -type f | head -20
                    else
                      echo "❌ Release package not found"
                      exit 1
                    fi
                  displayName: "Prepare GitHub Release"

                - task: PowerShell@2
                  displayName: "Generate GitHub Release Notes"
                  inputs:
                    targetType: "inline"
                    script: |
                      $version = "$(RELEASE_VERSION)"
                      $packageName = "$(PACKAGE_NAME)"
                      $buildId = "$(resources.pipeline.BuildPipeline.runID)"
                      $today = Get-Date -Format "dd.MM.yyyy"
                      
                      # Extrahiere DEB-Dateinamen
                      $releasePath = "$(Pipeline.Workspace)/RaspberryPi-Release-$(RELEASE_VERSION)"
                      $debFiles = Get-ChildItem -Path "$releasePath/packages" -Filter "*.deb" -ErrorAction SilentlyContinue
                      $debFileName = if ($debFiles) { $debFiles[0].Name } else { "$($packageName)_$($version)_armhf.deb" }
                      
                      $releaseNotes = @"
                      # 🍓 MthBdeIotClient Raspberry Pi Release v$version
                      
                      ## Raspberry Pi 3+ Installation Package
                      
                      Automatisch erstellt am $today durch Azure DevOps Pipeline.
                      
                      ### 📦 Download
                      - **Raspberry Pi 3+ (ARMv7l):** [$debFileName]($debFileName)
                      
                      ### 🔧 Schnell-Installation
                      ``````bash
                      # Download und Installation
                      wget https://github.com/$(githubRepository)/releases/latest/download/$debFileName
                      sudo dpkg -i $debFileName
                      sudo apt-get install -f
                      ``````
                      
                      ### 🚀 Anwendung starten
                      ``````bash
                      mthbdeiotclient
                      ``````
                      
                      ### 📋 Systemanforderungen
                      - Raspberry Pi 3, 3+, 4 oder Zero 2 W
                      - Raspberry Pi OS (32-bit, ARMv7l)
                      - Mindestens 1GB RAM
                      - Desktop-Umgebung (X11)
                      
                      ### 🔧 Troubleshooting
                      ``````bash
                      # Bei fehlenden Abhängigkeiten
                      sudo apt-get update
                      sudo apt-get install -f
                      
                      # Bei Berechtigungsproblemen
                      sudo chmod +x /usr/bin/mthbdeiotclient
                      
                      # Bei Display-Problemen
                      export DISPLAY=:0
                      mthbdeiotclient
                      ``````
                      
                      ### 📖 Weitere Informationen
                      - [Raspberry Pi Installation Guide](https://github.com/$(githubRepository)/blob/master/App/RASPBERRY_INSTALLATION.md)
                      - [Deployment Guide](https://github.com/$(githubRepository)/blob/master/DEPLOYMENT_GUIDE.md)
                      
                      ---
                      **Build:** $buildId | **Datum:** $today | **Architektur:** ARMv7l
                      "@
                      
                      $releaseNotes | Out-File -FilePath "$(Agent.TempDirectory)/github-release-notes.md" -Encoding UTF8
                      Write-Host "GitHub release notes generated"
                      
                      # Setze Tag Name
                      $tagName = "v$version"
                      Write-Host "##vso[task.setvariable variable=TAG_NAME]$tagName"
                      Write-Host "##vso[task.setvariable variable=DEB_FILENAME]$debFileName"

                - script: |
                    echo "=== PREPARING GITHUB ASSETS ==="
                    
                    release_path="$(Pipeline.Workspace)/RaspberryPi-Release-$(RELEASE_VERSION)"
                    assets_path="$(Agent.TempDirectory)/github-assets"
                    
                    # Erstelle Assets-Ordner
                    mkdir -p "$assets_path"
                    
                    # Kopiere DEB-Dateien
                    if [ -d "$release_path/packages" ]; then
                      echo "Copying DEB packages..."
                      cp "$release_path/packages"/*.deb "$assets_path/" 2>/dev/null || echo "No DEB files found"
                      cp "$release_path/packages/SHA256SUMS" "$assets_path/" 2>/dev/null || echo "No SHA256SUMS found"
                    fi
                    
                    # Kopiere wichtige Dokumentation
                    if [ -d "$release_path/installation" ]; then
                      echo "Copying installation files..."
                      cp "$release_path/installation/RASPBERRY_INSTALLATION.md" "$assets_path/" 2>/dev/null || echo "No RASPBERRY_INSTALLATION.md found"
                      cp "$release_path/installation/deploy.ps1" "$assets_path/" 2>/dev/null || echo "No deploy.ps1 found"
                    fi
                    
                    # Kopiere Release-Dokumentation
                    if [ -f "$release_path/documentation/release-documentation.md" ]; then
                      cp "$release_path/documentation/release-documentation.md" "$assets_path/INSTALL_GUIDE.md"
                    fi
                    
                    echo "✅ GitHub assets prepared:"
                    ls -la "$assets_path"
                  displayName: "Prepare GitHub Assets"

                - task: GitHubRelease@1
                  displayName: "Create GitHub Release"
                  inputs:
                    gitHubConnection: $(githubConnection)
                    repositoryName: $(githubRepository)
                    action: "create"
                    target: "$(Build.SourceVersion)"
                    tagSource: "userSpecifiedTag"
                    tag: "$(TAG_NAME)"
                    title: "MthBdeIotClient Raspberry Pi v$(RELEASE_VERSION)"
                    releaseNotesSource: "filePath"
                    releaseNotesFilePath: "$(Agent.TempDirectory)/github-release-notes.md"
                    assets: "$(Agent.TempDirectory)/github-assets/*"
                    isPreRelease: false
                    isDraft: false
                    changeLogCompareToRelease: "lastFullRelease"
                    changeLogType: "commitBased"

                - task: GitHubRelease@1
                  displayName: "Update Latest Release"
                  inputs:
                    gitHubConnection: $(githubConnection)
                    repositoryName: $(githubRepository)
                    action: "edit"
                    target: "$(Build.SourceVersion)"
                    tag: "$(TAG_NAME)"
                    title: "MthBdeIotClient Raspberry Pi v$(RELEASE_VERSION) [LATEST]"
                    releaseNotesSource: "filePath"
                    releaseNotesFilePath: "$(Agent.TempDirectory)/github-release-notes.md"
                    assets: "$(Agent.TempDirectory)/github-assets/*"
                    isPreRelease: false
                    isDraft: false
                    changeLogCompareToRelease: "lastFullRelease"
                    changeLogType: "commitBased"
                  condition: succeededOrFailed()

                - script: |
                    echo "=========================================="
                    echo "🚀 GITHUB RELEASE PUBLISHED"
                    echo "=========================================="
                    echo ""
                    echo "✅ Release Status: SUCCESS"
                    echo "🏷️ Tag: $(TAG_NAME)"
                    echo "📦 Version: $(RELEASE_VERSION)"
                    echo "🔗 Repository: https://github.com/$(githubRepository)"
                    echo "📋 Release URL: https://github.com/$(githubRepository)/releases/tag/$(TAG_NAME)"
                    echo "📥 Latest URL: https://github.com/$(githubRepository)/releases/latest"
                    echo ""
                    echo "📦 PUBLISHED ASSETS:"
                    echo "- $(DEB_FILENAME)"
                    echo "- SHA256SUMS"
                    echo "- RASPBERRY_INSTALLATION.md"
                    echo "- INSTALL_GUIDE.md"
                    echo ""
                    echo "🍓 RASPBERRY PI INSTALLATION:"
                    echo "wget https://github.com/$(githubRepository)/releases/latest/download/$(DEB_FILENAME)"
                    echo "sudo dpkg -i $(DEB_FILENAME)"
                    echo "sudo apt-get install -f"
                    echo ""
                    echo "=========================================="
                  displayName: "GitHub Release Summary"
