{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,OAAQ,I,mCCTXL,EAAOD,QAAUO,QAAQ,W,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaX,QAGrB,IAAIC,EAASO,EAAyBE,GAAY,CAGjDV,QAAS,CAAC,GAOX,OAHAa,EAAoBH,GAAUT,EAAQA,EAAOD,QAASS,GAG/CR,EAAOD,OACf,C,8ECpBA,gBAIMc,EAAkB,CACtBC,IAAK,CACHC,QAAS,IAAM,EAAAC,YAAYC,OAAO,gBAEpCC,SAAU,CACRC,iBAAkB,IAAM,EAAAH,YAAYC,OAAO,sBAE3CG,cAAe,IAAM,EAAAJ,YAAYC,OAAO,qBACxCI,SAAWC,GAAgB,EAAAN,YAAYC,OAAO,uBAAwBK,GACtEC,eAAgB,CAACD,EAAaE,IAC5B,EAAAR,YAAYC,OAAO,6BAA8BK,EAAKE,GACxDC,YAAcH,GACZ,EAAAN,YAAYC,OAAO,0BAA2BK,IAElDI,QAAUC,GAAkB,EAAAX,YAAYC,OAAO,WAAYU,GAC3DC,OAAQ,IAAM,EAAAZ,YAAYC,OAAO,WACjCD,YAAa,CACX,WAAAa,CAAYC,KAAsBC,GAChC,EAAAf,YAAYgB,KAAKF,KAAYC,EAC/B,EACA,EAAAE,CAAGH,EAAmBI,GACpB,MAAMC,EAAe,CAACC,KAA6BL,IACjDG,KAAQH,GAGV,OAFA,EAAAf,YAAYiB,GAAGH,EAASK,GAEjB,KACL,EAAAnB,YAAYqB,eAAeP,EAASK,GAExC,EACA,IAAAG,CAAKR,EAAmBI,GACtB,EAAAlB,YAAYsB,KAAKR,EAAS,CAACM,KAAWL,IAASG,KAAQH,GACzD,IAIJ,EAAAQ,cAAcC,kBAAkB,WAAY3B,E","sources":["webpack://mthbdeiotclient/webpack/universalModuleDefinition","webpack://mthbdeiotclient/external node-commonjs \"electron\"","webpack://mthbdeiotclient/webpack/bootstrap","webpack://mthbdeiotclient/./src/main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Disable no-unused-vars, broken for spread args\n/* eslint no-unused-vars: off */\nimport { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\n\nexport type Channels = 'ipc-example';\n\nconst electronHandler = {\n  app: {\n    restart: () => ipcRenderer.invoke('restart-app'),\n  },\n  dbConfig: {\n    getInitialConfig: () => ipcRenderer.invoke('get-initial-config'),\n\n    readAllConfig: () => ipcRenderer.invoke('db-config-get-all'),\n    getByKey: (key: string) => ipcRenderer.invoke('db-config-get-by-key', key),\n    createOrUpdate: (key: string, value: string) =>\n      ipcRenderer.invoke('db-config-create-or-update', key, value),\n    deleteByKey: (key: string) =>\n      ipcRenderer.invoke('db-config-delete-by-key', key),\n  },\n  dbQuery: (query: string) => ipcRenderer.invoke('db-query', query),\n  getEnv: () => ipcRenderer.invoke('get-env'),\n  ipcRenderer: {\n    sendMessage(channel: Channels, ...args: unknown[]) {\n      ipcRenderer.send(channel, ...args);\n    },\n    on(channel: Channels, func: (...args: unknown[]) => void) {\n      const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n        func(...args);\n      ipcRenderer.on(channel, subscription);\n\n      return () => {\n        ipcRenderer.removeListener(channel, subscription);\n      };\n    },\n    once(channel: Channels, func: (...args: unknown[]) => void) {\n      ipcRenderer.once(channel, (_event, ...args) => func(...args));\n    },\n  },\n};\n\ncontextBridge.exposeInMainWorld('electron', electronHandler);\n\nexport type ElectronHandler = typeof electronHandler;\n"],"names":["root","factory","exports","module","define","amd","a","i","global","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","electronHandler","app","restart","ipcRenderer","invoke","dbConfig","getInitialConfig","readAllConfig","getByKey","key","createOrUpdate","value","deleteByKey","dbQuery","query","getEnv","sendMessage","channel","args","send","on","func","subscription","_event","removeListener","once","contextBridge","exposeInMainWorld"],"sourceRoot":""}